# services:
#   server:
#     build:
#       context: .
#       dockerfile: Dockerfile.server
#     ports:
#       - "5000:5000"
#     volumes:
#       - ./data:/app/data
#     networks:
#       - app-network
#     healthcheck:
#       test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:5000/health\")'" ]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#       start_period: 20s

#   client1:
#     build:
#       context: .
#       dockerfile: Dockerfile.client
#     environment:
#       - SERVER_URL=http://server:5000  # Use the service name 'server'
#     command: python client1.py
#     depends_on:
#       server:
#         condition: service_healthy
#     networks:
#       - app-network
#     restart: on-failure

#   client2:
#     build:
#       context: .
#       dockerfile: Dockerfile.client
#     environment:
#       - SERVER_URL=http://server:5000  # Use the service name 'server'
#     command: python client2.py
#     depends_on:
#       server:
#         condition: service_healthy
#     networks:
#       - app-network
#     restart: on-failure

# networks:
#   app-network:
#     driver: bridge

# volumes:
#   data:


services:
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    ports:
      - "5000:5000"
    volumes:
      - ./data:/app/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:5000/health\")'" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  client1:
    build:
      context: .
      dockerfile: Dockerfile.client
    environment:
      - SERVER_URL=http://server:5000
    command: ["/bin/sh", "-c", "sleep 5 && python client1.py"]  # Ensures both clients start simultaneously
    depends_on:
      server:
        condition: service_healthy
    networks:
      - app-network
    restart: on-failure

  client2:
    build:
      context: .
      dockerfile: Dockerfile.client
    environment:
      - SERVER_URL=http://server:5000
    command: ["/bin/sh", "-c", "sleep 5 && python client2.py"]  # Ensures both clients start simultaneously
    depends_on:
      server:
        condition: service_healthy
    networks:
      - app-network
    restart: on-failure

networks:
  app-network:
    driver: bridge

volumes:
  data:
